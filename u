#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2017 Royce Dascalu
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import sys
from unicodedata import normalize, name, combining
from re import split
from string import hexdigits

symbols = {
	'SS': '§', 'sect': '§',            # section symbol, aka silcrow
	'oc': '©', 'oC': '©',
	'or': '®', 'oR': '®',
	'tm': '™', 'TM': '™',
	'x': '×',
	'chk': '✓', 'CHK': '✓',
	'v': '✓',
	'X': '✗',
	'gbp': '£', 'GBP': '£', 'pound': '£',
	'eur': '€', 'EUR': '€', 'euro': '€',
	'yen': '¥', 'Yen': '¥',
	'jpy': '¥', 'JPY': '¥',
	'usd': '$', 'USD': '$', 'dollar': '$',
	'cur': '¤', 'CUR': '¤',
	'cent': '¢',
	'deg': '°', 'DEG': '°',
	'par': '¶', 'PAR': '¶',
	'%0': '‰', 'pm': '‰', 'PM': '‰',
	'bullet': '•',
	'ditto': '″',
	'approx': '≈',
	'~=': '≅',
	'not': '¬',
	'i?': '¿',
	'i!': '¡',
	'/s': '⸮',
	'^0': '⁰',
	'^1': '¹',
	'^2': '²',
	'^3': '³',
	'^4': '⁴',
	'^5': '⁵',
	'^6': '⁶',
	'^7': '⁷',
	'^8': '⁸',
	'^9': '⁹'
}

# List and names from https://en.wikipedia.org/wiki/Combining_character
modifw = {
	'grave': '\u0300',                                                  # à / À
	'acute': '\u0301',                                                  # á / Á
	'circumflex': '\u0302', 'hat': '\u0302', 'roof': '\u0302',          # â / Â
	'house': '\u0302',
	'tilde': '\u0303',                                                  # ã / Ã
	'macron': '\u0304',                                                 # ā / Ā
	'breve': '\u0306', 'vrachy': '\u0306', 'brachy': '\u0306',          # ă / Ă
	'overdot': '\u0307', 'odot': '\u0307',                              # ȧ / Ȧ
	'umlaut': '\u0308', 'diaereis': '\u0308', 'trema': '\u0308',        # ä / Ä
	'dieresis': '\u0308',
	'hookabove': '\u0309', 'ohook': '\u0309',                     # (VNM) ả / Ả
	'overhook': '\u0309',
	'overring': '\u030A', 'ring': '\u030A',                             # å / Å
	'doubleacute': '\u030B', 'dacute': '\u030B',                  # (HUN) a̋ / A̋
	'hungarumlaut': '\u030B',
	'caron': '\u030C', 'wedge': '\u030C', 'ihat': '\u030C',             # ǎ / Ǎ
	'hacek': '\u030C', 'hachek': '\u030C', 'icircumflex': '\u030C',
	'invertedhat': '\u030C',
	'doublegrave': '\u030F', 'dgrave': '\u030F',                        # ȁ / Ȁ
	'invertedbreve': '\u0311', 'ibreve': '\u0311', 'arch': '\u0311',    # ȃ / Ȃ
	'overcomma': '\u0313', 'ocomma': '\u0313',                    # (GRE) ἀ / Ἀ
	'smoothbreathing': '\u0313',
	'rovercomma': '\u0314', 'rocomma': '\u0314',                  # (GRE) ῥ
	'roughbreathing': '\u0314',
	'horn': '\u031B',                                             # (VNM) ơ / Ơ
	'palatalhook': '\u0321', 'phook': '\u0321',                   # (IPA) ᶎ / ᶁ
	'retroflexhook': '\u0322', 'rhook': '\u0322',                 # (IPA) ʐ / ᶒ
	'underdot': '\u0323', 'udot': '\u0323',                             # ạ / Ạ
	'underring': '\u0325',                                              # ḁ / Ḁ
	'cedilla': '\u0327', 'cedille': '\u0327', 'cedilha': '\u0327',      # a̧ / A̧
	'ogonek': '\u0328', 'nosine': '\u0328',                             # ą / Ą
	'underbar': '\u0331', 'bmacron': '\u0331', 'umacron': '\u0331',     # a̱ / A̱
	'underline': '\u0332', 'underscore': '\u0332',                      # a̲ / A̲
	'hbar': '\u0335', 'stroke': '\u0335', 'shortstroke': '\u0335',      # ̵q / ̵Q
	'lhbar': '\u0336', 'lstroke': '\u0336', 'longstroke': '\u0336',     # ̶q / ̶Q
	'strikethrough': '\u0336',
	'slash': '\u0337', 'solidus': '\u0337', 'shortsolidus': '\u0337',   # ̷q / ̷Q
	'lslash': '\u0338', 'lsolidus': '\u0337', 'longsolidus': '\u0338',  # ̸q / ̸Q
	'undercomma': '\u0326', 'bcomma': '\u0326', 'ucomma': '\u0326',     # a̦ / A̦
	'perispomeni': '\u0342',                                      # (GRE) ᾶ
	'iota': '\u0345', 'ypomegrameni': '\u0345'                    # (GRE) ᾳ / ῳ
}

# Diacritic escape codes using LaTeX naming (with some additions)
# See https://en.wikibooks.org/wiki/LaTeX/Special_Characters#Escaped_codes
modifc = {
	'`': '\u0300',                  # ò   grave
	'\'': '\u0301',                 # ó   acute
	'^': '\u0302',                  # ô   circumflex
	'~': '\u0303',                  # õ   tilde
	'=': '\u0304', '-': '\u0304',   # ō   macron
	'u': '\u0306',                  # ŏ   breve
	'.': '\u0307',                  # ȯ   dot over
	'"': '\u0308',                  # ö   umlaut
	'r': '\u030A', 'o': '\u030A',   # å   ring over
	'H': '\u030B',                  # ő   Hungarian umlaut
	'v': '\u030C',                  # š   caron / háček
	'd': '\u0323',                  # ụ   dot under
	',': '\u0326',                  # ș   comma under
	'c': '\u0327',                  # ç   cedilla
	'k': '\u0328',                  # ą   ogonek
	'b': '\u0332', '_': '\u0332',   # o̲   bar under (underline)
}

# Display help / documentation if requested
if any(i in sys.argv[1:] for i in ['-h', '--help', '-?', '/?']):
	with open('uhelp.txt', 'r') as hlp:
		sys.stdout.write(hlp.read())
	sys.exit(0)
elif '--show' in sys.argv[1:]:
	def arr(d):
		return sorted(d.items(), key=lambda t: t[1])
	print('Diacritic words (case insensitive):')
	print('\n'.join('{:18} {}'.format(c[0], name(c[1])) for c in arr(modifw)))
	print('\nDiacritic symbols (LaTeX naming):')
	print('\n'.join('{:18} {}'.format(c[0], name(c[1])) for c in arr(modifc)))
	print('\nList of supported, regular symbols:')
	print('\n'.join('{:18} {}'.format(*s) for s in arr(symbols)))
	sys.exit(0)

# Get options
options = {
	'--noprecomb': False, 'p': False,
	'--nolatex': False, 'l': False,
	'--nosymbol': False, 's': False,
	'--nocomb': False, 'c': False,
	'--nortrim': False, 'r': False
}
cnt = 0
for opt in sys.argv[1:]:
	if opt.startswith('--'):
		if opt in options:
			options[opt] = True
			cnt += 1
			continue
	elif opt.startswith('-') and all(c in options for c in opt[1:]):
		# Only set options if all letters are options, otherwise the string is
		# a regular argument (e.g. 'u -cro' is valid, but -o isn't an option).
		for c in opt[1:]:
			options[c] = True
			cnt += 1
		continue
	break
sys.argv[1:] = sys.argv[cnt + 1:]

clatex = not (options['--nolatex'] or options['l'])
csymbol = not (options['--nosymbol'] or options['s'])
ccombin = not (options['--nocomb'] or options['c'])
csubstr = not (options['--nortrim'] or options['r'])

# Function to find precombined versions of characters with diacritics
if options['--noprecomb'] or options['p']:
	def tryprecomb(s):
		return s
else:
	def tryprecomb(s):
		return normalize('NFC', s)

# Diacritic words provided, convert, combine and return
if len(sys.argv) > 2:
	res = sys.argv[1]
	for arg in sys.argv[2:]:
		arg = arg.lower()  # Ignore case for diacritic words
		if arg in modifw:
			arg = modifw[arg]
		if len(arg) != 1 or not combining(arg):
			sys.stderr.write('Invalid diacritic provided: {}\n'.format(arg))
			sys.exit(2)
		res += arg
	sys.stdout.write(tryprecomb(res))
	sys.exit(0)

if clatex:
	from latexToUnicode import texmap


# Functions
def combine(s: str) -> str:
	"""Converts the provided string to a character with diacritics."""
	res = s[-1]
	s = s[:-1]
	for c in reversed(s):
		if c in modifc:
			res += modifc[c]
		else:
			return None
	return tryprecomb(res)


def convu(s: str) -> str:
	"""Attempts to convert an hex string to Unicode."""
	if s.startswith(('\\u', '\\U')):
		if len(s) in (6, 10) and all(c in hexdigits for c in s[2:]):
			return chr(int(s[2:], 16))
	elif s.startswith(('u', 'U')):
		if len(s) in (5, 9) and all(c in hexdigits for c in s[1:]):
			return chr(int(s[1:], 16))
	return None


def convstr(s: str) -> str:
	"""Attempts to convert s by LaTeX / symbol table lookup, with
	unicode conversion or combine(). Returns the result if successful
	and None otherwise.
	"""
	if clatex:
		if s in texmap:
			return texmap[s]
		elif '\\' + s in texmap:
			return texmap['\\' + s]
	if csymbol and s in symbols:
		return symbols[s]
	uconv = convu(s)
	if uconv is not None:
		return uconv
	if ccombin:
		return combine(s)
	return None


def rred(s: str) -> (str, bool):
	""""Right trims s until a successful conversion is found.
	Substitutes the result into s if successful and returns s
	with a value indicating success or failure.
	"""
	word = s
	if csubstr:
		while len(word) > 0:
			res = convstr(word)
			if res is not None and res != word:   # Ensures '\axxx' -/-> 'axxx'
				return res + s[len(word):], True  # Converted + remaining part
			word = word[:-1]
	else:
		res = convstr(word)
		if res is not None and res != word:
			return res, True
	return s, False


def wordred(s: str) -> str:
	"""Attempts to convert s and returns it."""
	# Filter non-escaped and double-escaped strings
	if not s.startswith('\\') or s.startswith('\\\\'):
		return s
	res, suc = rred(s[1:])
	if suc:
		return res
	return s


def worddiv(s: str) -> str:
	"""Divides a string into escaped substrings and attempts to
	reduce each one, before rejoining them and returning the result.
	"""
	# Split by any number of '\' (e.g. 'a\b\\c' -> ['a', '\b', '', '\\c', ''])
	words = split(r'(\\+[^\\]*)', s)
	return ''.join(wordred(w) for w in words)

# If a single argument was provided, convert it
if len(sys.argv) == 2:
	sys.stdout.write(rred(sys.argv[1])[0])
	sys.exit(0)

# No command line arguments, so read stdin
for line in sys.stdin:
	line = line.rstrip('\r\n')  # -> '\n' with universal newline support
	print(' '.join(worddiv(w) for w in line.split(' ')))
sys.exit(0)
